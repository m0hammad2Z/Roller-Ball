//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Game.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Game: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Game()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Game"",
    ""maps"": [
        {
            ""name"": ""Game Map"",
            ""id"": ""9c1dc215-b05c-442e-b393-9a26eac1ed6b"",
            ""actions"": [
                {
                    ""name"": ""Touch Press"",
                    ""type"": ""Button"",
                    ""id"": ""b5802920-a9a2-4e74-a35d-0f4cc314a9e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start touch pos"",
                    ""type"": ""PassThrough"",
                    ""id"": ""95576b63-9e43-4960-bdda-3b7c7e61e526"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Current touch pos"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8a462fd1-5805-468c-8e37-7a2853866fb2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Right Arrow"",
                    ""type"": ""Button"",
                    ""id"": ""be27b11f-ae67-4544-9a91-a0c5132c8b98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Arrow"",
                    ""type"": ""Button"",
                    ""id"": ""c76279b7-6aa2-4190-b8d1-aab4b5f78240"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e5067f5c-8640-4ce5-8135-ce1ded44f469"",
                    ""path"": ""<Touchscreen>/primaryTouch/startPosition/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start touch pos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5f3ea94-02bc-44a1-b82e-c42914261220"",
                    ""path"": ""<Touchscreen>/primaryTouch/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Current touch pos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1af933a-579d-412e-85d8-abf416359b5f"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a729cd0f-4805-4f17-a5ab-391095c5008c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19ba27d6-90d3-4e45-b29f-3777b98d6a01"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8790e19-089a-4e42-9ce8-bf13ab996cf3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c8c500a-99d2-42ec-8cbf-1fe8fe5aa40f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game Map
        m_GameMap = asset.FindActionMap("Game Map", throwIfNotFound: true);
        m_GameMap_TouchPress = m_GameMap.FindAction("Touch Press", throwIfNotFound: true);
        m_GameMap_Starttouchpos = m_GameMap.FindAction("Start touch pos", throwIfNotFound: true);
        m_GameMap_Currenttouchpos = m_GameMap.FindAction("Current touch pos", throwIfNotFound: true);
        m_GameMap_RightArrow = m_GameMap.FindAction("Right Arrow", throwIfNotFound: true);
        m_GameMap_LeftArrow = m_GameMap.FindAction("Left Arrow", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game Map
    private readonly InputActionMap m_GameMap;
    private List<IGameMapActions> m_GameMapActionsCallbackInterfaces = new List<IGameMapActions>();
    private readonly InputAction m_GameMap_TouchPress;
    private readonly InputAction m_GameMap_Starttouchpos;
    private readonly InputAction m_GameMap_Currenttouchpos;
    private readonly InputAction m_GameMap_RightArrow;
    private readonly InputAction m_GameMap_LeftArrow;
    public struct GameMapActions
    {
        private @Game m_Wrapper;
        public GameMapActions(@Game wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPress => m_Wrapper.m_GameMap_TouchPress;
        public InputAction @Starttouchpos => m_Wrapper.m_GameMap_Starttouchpos;
        public InputAction @Currenttouchpos => m_Wrapper.m_GameMap_Currenttouchpos;
        public InputAction @RightArrow => m_Wrapper.m_GameMap_RightArrow;
        public InputAction @LeftArrow => m_Wrapper.m_GameMap_LeftArrow;
        public InputActionMap Get() { return m_Wrapper.m_GameMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameMapActions set) { return set.Get(); }
        public void AddCallbacks(IGameMapActions instance)
        {
            if (instance == null || m_Wrapper.m_GameMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameMapActionsCallbackInterfaces.Add(instance);
            @TouchPress.started += instance.OnTouchPress;
            @TouchPress.performed += instance.OnTouchPress;
            @TouchPress.canceled += instance.OnTouchPress;
            @Starttouchpos.started += instance.OnStarttouchpos;
            @Starttouchpos.performed += instance.OnStarttouchpos;
            @Starttouchpos.canceled += instance.OnStarttouchpos;
            @Currenttouchpos.started += instance.OnCurrenttouchpos;
            @Currenttouchpos.performed += instance.OnCurrenttouchpos;
            @Currenttouchpos.canceled += instance.OnCurrenttouchpos;
            @RightArrow.started += instance.OnRightArrow;
            @RightArrow.performed += instance.OnRightArrow;
            @RightArrow.canceled += instance.OnRightArrow;
            @LeftArrow.started += instance.OnLeftArrow;
            @LeftArrow.performed += instance.OnLeftArrow;
            @LeftArrow.canceled += instance.OnLeftArrow;
        }

        private void UnregisterCallbacks(IGameMapActions instance)
        {
            @TouchPress.started -= instance.OnTouchPress;
            @TouchPress.performed -= instance.OnTouchPress;
            @TouchPress.canceled -= instance.OnTouchPress;
            @Starttouchpos.started -= instance.OnStarttouchpos;
            @Starttouchpos.performed -= instance.OnStarttouchpos;
            @Starttouchpos.canceled -= instance.OnStarttouchpos;
            @Currenttouchpos.started -= instance.OnCurrenttouchpos;
            @Currenttouchpos.performed -= instance.OnCurrenttouchpos;
            @Currenttouchpos.canceled -= instance.OnCurrenttouchpos;
            @RightArrow.started -= instance.OnRightArrow;
            @RightArrow.performed -= instance.OnRightArrow;
            @RightArrow.canceled -= instance.OnRightArrow;
            @LeftArrow.started -= instance.OnLeftArrow;
            @LeftArrow.performed -= instance.OnLeftArrow;
            @LeftArrow.canceled -= instance.OnLeftArrow;
        }

        public void RemoveCallbacks(IGameMapActions instance)
        {
            if (m_Wrapper.m_GameMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameMapActions instance)
        {
            foreach (var item in m_Wrapper.m_GameMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameMapActions @GameMap => new GameMapActions(this);
    public interface IGameMapActions
    {
        void OnTouchPress(InputAction.CallbackContext context);
        void OnStarttouchpos(InputAction.CallbackContext context);
        void OnCurrenttouchpos(InputAction.CallbackContext context);
        void OnRightArrow(InputAction.CallbackContext context);
        void OnLeftArrow(InputAction.CallbackContext context);
    }
}
